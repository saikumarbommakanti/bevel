##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
 
---
# yaml-language-server: $schema=../../../../platforms/network-schema.json
# This is a sample configuration file for Hyperledger Besu network which has 4 nodes.
# All text values are case-sensitive
network:
  # Network level configuration specifies the attributes required for each organization
  # to join an existing network.
  type: quorum
  version: "NETWORK_VERSION"        # Supported Besu versions are 21.1.1, 21.10.6, 22.10.2
  # onchain permissioning - ref https://besu.hyperledger.org/en/stable/private-networks/tutorials/permissioning/onchain
 
  #Environment section for Kubernetes setup
  env:
    type: "FLUX_SUFFIX"              # tag for the environment. Important to run multiple flux on single cluster
    proxy: "ambassador"               # value can be 'ambassador' or 'none' as 'haproxy' has not been implemented for Besu
    proxy_namespace: "ambassador"
    #  These ports are enabled per cluster, so if you have multiple clusters you do not need so many ports
    #  This sample uses a single cluster, so we have to open 3 ports for each Node. These ports are again specified for each organization below
    ambassadorPorts:                # Any additional Ambassador ports can be given here, this is valid only if proxy='ambassador'
      portRange:              # For a range of ports
        from: PORT_RANGE_FROM               #15010
        to:   PORT_RANGE_TO                         #15090
    # ports: [15020,15021]      # For specific ports; needs to be an array or list
    loadBalancerSourceRanges: # (Optional) Default value is '0.0.0.0/0', this value can be changed to any other IP adres or list (comma-separated without spaces) of IP adresses, this is valid only if proxy='ambassador'
    retry_count: 20                 # Retry count for the checks on Kubernetes cluster
    external_dns: enabled           # Should be enabled if using external-dns for automatic route configuration
# Docker registry details where images are stored. This will be used to create k8s secrets
# Please ensure all required images are built and stored in this registry.
# Do not check-in docker_password.
  docker:
    url: "DOCKER_URL"
    username: "DOCKER_USERNAME"
    password: "DOCKER_PASSWORD"
 
    # Following are the configurations for the common Quorum network
  config:
    consensus: "ibft"                 # Options are "raft" and "ibft"
    ## Certificate subject for the root CA of the network.
    #  This is for GIT_BRANCHment usage only where we create self-signed certificates and the truststores are generated automatically.
    #  Production systems should generate proper certificates and configure truststores accordingly.
    subject: "CN=DLT Root CA,OU=DLT,O=DLT,L=London,C=GB"
    transaction_manager: "tessera"    # Options are "tessera" and "none"
    # This is the version of "tessera"
    tm_version: "23.4.0"
    tm_tls: "strict"                  # Options are "strict" and "off"
    tm_trust: "tofu"                  # Options are: "ca-or-tofu", "ca", "tofu"
    ## Transaction Manager nodes public addresses should be provided.
    #  For "tessera", all participating nodes should be provided
    # In the example (for tessera ) below, the domain name is formed by the https://(peer.name).(org.external_url_suffix):(ambassador default port)
    tm_nodes:
      - "https://carrier.EXTERNAL_URL_SUFFIX"
      - "https://manufacturer.EXTERNAL_URL_SUFFIX"
      # - "https://store.test.quorum.blockchaincloudpoc.com"
      # - "https://warehouse.test.quorum.blockchaincloudpoc.com"

    staticnodes: "/home/runner/bevel/build/quorum_staticnodes" # Location where staticnodes will be saved
    genesis: "/home/runner/bevel/build/quorum_genesis"   # Location where genesis file will be saved
    # NOTE for the above paths, the directories should exist
 
  # Allows specification of one or many organizations that will be connecting to a network.
  organizations:
    # Specification for the 1st organization. Each organization should map to a VPC and a separate k8s cluster for production deployments
    - organization:
      name: carrier
      unit: Carrier
      external_url_suffix: saikb.dev.aws.blockchaincloudpoc-develop.com   # This is the url suffix that will be added in DNS recordset. Must be different for different clusters
      cloud_provider: aws   # Options: aws, azure, gcp
      aws:
        access_key: "AWS_ACCESS_KEY"        # AWS Access key, only used when cloud_provider=aws
        secret_key: "AWS_SECRET_KEY"        # AWS Secret key, only used when cloud_provider=aws
      # Kubernetes cluster deployment variables. The config file path and name has to be provided in case
      # the cluster has already been created.
      k8s:
        context: "CLUSTER_CONTEXT"
        config_file: "CLUSTER_CONFIG"
      # Hashicorp Vault server address and root-token. Vault should be unsealed.
      # Do not check-in root_token
      vault:
        url: "VAULT_ADDR"
        root_token: "VAULT_ROOT_TOKEN"
        secret_path: "secretsv2"
      # Git Repo details which will be used by GitOps/Flux.
      # Do not check-in git_access_token
      gitops:
        git_protocol: "https" # Option for git over https or ssh
        git_url: "https://github.com/GITHUB_USERNAME/bevel-3.git"         # Gitops https or ssh url for flux value files
        branch: "GIT_BRANCH"           # Git branch where release is being made
        release_dir: "platforms/quorum/releases/dev" # Relative Path in the Git repo for flux sync per environment.
        chart_source: "platforms/quorum/charts"     # Relative Path where the Helm charts are stored in Git repo
        git_repo: "github.com/GITHUB_USERNAME/bevel-3.git"   # Gitops git repository URL for git push
        username: "GITHUB_USERNAME"          # Git Service user who has rights to check-in in all branches
        password: "GITHUB_TOKEN"          # Git Server user password/token (Optional for ssh; Required for https)
        email: "GITHUB_EMAIL_ADDR"                # Email to use in git config
        private_key: "PRIVATE_KEY_PATH"          # Path to private key file which has write-access to the git repo (Optional for https; Required for ssh)
      # The participating nodes are named as peers
      services:
        peers:
        - peer:
          name: caone
          subject: "O=Carrier,OU=Carrier,L=51.50/-0.13/London,C=GB" # This is the node subject. L=lat/long is mandatory for supplychain sample app
          type: member         # value can be validator or member, only applicable if consensus = 'ibft'
          geth_passphrase: "12345"  # Passphrase to be used to generate geth account
          lock: false        # true or false: corresponds to, **geth --allow-insecure-unlock**, while starting up the node
          p2p:
            port: 21000
            ambassador: 15010       #Port exposed on ambassador service (use one port per org if using single cluster)
          rpc:
            port: 8546
          transaction_manager:
            port: 443
            ambassador: 443
            clientport: 8888
          raft:                     # Only used if consensus = 'raft'
            port: 50401
            ambassador: 15013
          db:                       # Only used if transaction_manager = "tessera"
            port: 3306
        - peer:
          name: validator1
          subject: "O=Validator1,OU=Validator1,L=51.50/-0.13/London,C=GB" # This is the node subject. L=lat/long is mandatory for supplychain sample app
          type: validator         # value can be validator or member, only applicable if consensus = 'ibft'
          geth_passphrase: "12345"  # Passphrase to be used to generate geth account
          lock: false        # true or false: corresponds to, **geth --allow-insecure-unlock**, while starting up the node
          p2p:
            port: 21000
            ambassador: 15014       #Port exposed on ambassador service (use one port per org if using single cluster)
          rpc:
            port: 8546
          db:                       # Only used if transaction_manager = "tessera"
            port: 3306

    # Specification for the 2nd organization. Each organization maps to a VPC and a separate k8s cluster
    - organization:
      name: maone
      unit: Maone
      external_url_suffix: saikb.dev.aws.blockchaincloudpoc-develop.com
      cloud_provider: aws   # Options: aws, azure, gcp
      aws:
        access_key: "AWS_ACCESS_KEYs"        # AWS Access key, only used when cloud_provider=aws
        secret_key: "AWS_SECRET_KEY"        # AWS Secret key, only used when cloud_provider=aws
      # Kubernetes cluster deployment variables. The config file path and name has to be provided in case
      # the cluster has already been created.
      k8s:
        context: "CLUSTER_CONTEXT"
        config_file: "CLUSTER_CONFIG"
      # Hashicorp Vault server address and root-token. Vault should be unsealed.
      # Do not check-in root_token
      vault:
        url: "VAULT_ADDR"
        root_token: "VAULT_ROOT_TOKEN"
        secret_path: "secretsv2"
      # Git Repo details which will be used by GitOps/Flux.
      # IMPORTANT: Do not check-in your password, the git_access_token!
      gitops:
        git_protocol: "https" # Option for git over https or ssh
        git_url: "https://github.com/GITHUB_USERNAME/bevel-3.git"         # Gitops https or ssh url for flux value files
        branch: "GIT_BRANCH"           # Git branch where release is being made
        release_dir: "platforms/quorum/releases/dev" # Relative Path in the Git repo for flux sync per environment.
        chart_source: "platforms/quorum/charts"     # Relative Path where the Helm charts are stored in Git repo
        git_repo: "github.com/GITHUB_USERNAME/bevel-3.git"   # Gitops git repository URL for git push
        username: "GITHUB_USERNAME"          # Git Service user who has rights to check-in in all branches
        password: "GITHUB_TOKEN"          # Git Server user password/token (Optional for ssh; Required for https)
        email: "GITHUB_EMAIL_ADDR"                # Email to use in git config
        private_key: "PRIVATE_KEY_PATH"          # Path to private key file which has write-access to the git repo (Optional for https; Required for ssh)

      # The participating nodes are named as peers
      services:
        peers:
        - peer:
          name: maone
          subject: "O=Manufacturer,OU=Manufacturer,L=47.38/8.54/Zurich,C=CH"  # This is the node identity. L=lat/long is mandatory for supplychain sample app
          type: member         # value can be validator or member, only applicable if consensus = 'ibft'
          geth_passphrase: "12345"  # Passphrase to be used to generate geth account
          lock: false        # true or false: corresponds to, **geth --allow-insecure-unlock**, while starting up the node
          p2p:
            port: 21000
            ambassador: 15020       #Port exposed on ambassador service (use one port per org if using single cluster)
          rpc:
            port: 8546
          transaction_manager:
            port: 443
            ambassador: 443
            clientport: 8888
          raft:                     # Only used if consensus = 'raft'
            port: 50401
            ambassador: 15023
          db:                       # Only used if transaction_manager = "tessera"
            port: 3306
        - peer:
          name: validator2
          subject: "O=Validator2,OU=Validator2,L=47.38/8.54/Zurich,C=CH" # This is the node subject. L=lat/long is mandatory for supplychain sample app
          type: validator         # value can be validator or member, only applicable if consensus = 'ibft'
          geth_passphrase: "12345"  # Passphrase to be used to generate geth account
          lock: false        # true or false: corresponds to, **geth --allow-insecure-unlock**, while starting up the node
          p2p:
            port: 21000
            ambassador: 15024       #Port exposed on ambassador service (use one port per org if using single cluster)
          rpc:
            port: 8546
          db:                       # Only used if transaction_manager = "tessera"
            port: 3306
