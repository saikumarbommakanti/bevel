##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

###########################################################
# Playbook to create deployment files for the following:
#  storageclass
#  namespaces, service account and clusterrolebinding
# Playbook arguments: complete network.yaml
###########################################################
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:
  # Delete build directory before start of play, can be commented if you do not want to delete it.
  - name: Remove build directory
    file:
      path: "./build"
      state: absent

  - name: "Create namespace"
    include_role: 
      name: create/namespace 
    vars: 
      component_name: "{{ org.name }}-ns"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # # Create necessary secrets
  - name: "Create k8s secrets"
    include_role:
      name: create/secrets
    vars:
      component_ns: "{{ org.name | lower }}-ns"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: 
    - org.org_status is not defined or org.org_status == 'new'

  # Execute primary init for the network-service organization
  - name: "Setup primary init with network-service org"
    include_role:
      name: init
    vars:
      build_path: "./build"
      name: "{{ org.name | lower }}"
      component_ns: "{{ org.name | lower }}-ns"
      init_type: "primary_init"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      charts_dir: "{{ org.gitops.chart_source }}"
      values_dir: "./build/{{ component_ns }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: 
    - org.type == 'cenm' 
    - org.org_status is not defined or org.org_status == 'new'

  # # Setup CENM services for the network
  - name: "Setup cenm"   
    include_role: 
      name: "setup/cenm"
    vars:
      component_name: "{{org.name}}-cenm"
      node: "{{ org.services }}"
      organisation: "{{ org.name | lower }}"
      name: "{{ org.name | lower }}"
      component_ns: "{{ org.name | lower }}-ns"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      gitops: "{{ org.gitops }}"
      policy_type: "r3-corda-ent"
      init_type: "cenm"
      charts_dir: "{{ org.gitops.chart_source }}"
      values_dir: "./build/{{ component_ns }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: org.type == 'cenm'

  - name: Deploy notary service
    include_role:
      name: setup/notary
    vars:
      name: "{{ org.name | lower }}"
      node: "{{ org.services.notary }}"
      component_ns: "{{ org.name | lower }}-ns"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      gitops: "{{ org.gitops }}"
      charts_dir: "{{ org.gitops.chart_source }}"
      values_dir: "{{playbook_dir}}/../../../{{org.gitops.release_dir}}/{{ component_ns }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: 
      - org.services.notary is defined
      - org.org_status is not defined or org.org_status == 'new'

  # - name: Check that network services uri are reachable
  #   uri:
  #     url: "{{ item.uri }}"
  #     validate_certs: no
  #   register: this
  #   until: this.status == 200 or this.status == 401
  #   loop: "{{ network['network_services'] }}"
  #   retries: "{{ network.env.retry_count}}"
  #   delay: 2
  #   ignore_errors: true
  #   when: network.env.proxy != 'none'

  # - name: Deploy Corda nodes
  #   include_role:
  #     name: setup/node
  #   vars:
  #     name: "{{ org.name | lower }}"
  #     # node: "{{ org.services.notary }}"
  #     component_ns: "{{ org.name | lower }}-ns"
  #     external_url_suffix: {{ org.external_url_suffix }}
  #     kubernetes: "{{ org.k8s }}"
  #     vault: "{{ org.vault }}"
  #     gitops: "{{ org.gitops }}"
  #     charts_dir: "{{ org.gitops.chart_source }}"
  #     values_dir: "./build/{{ component_ns }}"
  #   loop: "{{ network['organizations'] }}"
  #   loop_control:
  #     loop_var: org
    # when: 
    #   - org.type == 'node'
    #   - org.org_status is not defined or org.org_status == 'new'


  # # Wait for cenm services to respond  
  # - name: Check that CENM uri are reachable
  #   uri:
  #     url: "{{ item.uri }}/status"
  #     validate_certs: no
  #   register: this
  #   until: this.status == 200
  #   loop: "{{ network['network_services'] }}"
  #   retries: "{{ network.env.retry_count}}"
  #   delay: 50

  # # Setup Corda Node services for the network
  # - name: Setup Corda Node services
  #   include_role:
  #     name: setup/node
  #   vars:
  #     services: "{{ org.services }}"
  #     organisation: "{{ org.name | lower }}"
  #     name: "{{ org.name | lower }}"
  #     sc_name: "{{ name }}-bevel-storageclass"
  #     component_ns: "{{ org.name | lower }}-ent"
  #     kubernetes: "{{ org.k8s }}"
  #     vault: "{{ org.vault }}"
  #     gitops: "{{ org.gitops }}"
  #     policy_type: "r3-corda-ent"
  #   loop: "{{ network['organizations'] }}"
  #   loop_control:
  #     loop_var: org
  #   when: org.type == 'node'

  # # Setup Additional Notary services for the network
  # - name: Setup Additional Notary services
  #   include_role:
  #     name: setup/notary
  #   vars:
  #     services: "{{ org.services }}"
  #     organisation: "{{ org.name | lower }}"
  #     name: "{{ org.name | lower }}"
  #     sc_name: "{{ name }}-bevel-storageclass"
  #     component_ns: "{{ org.name | lower }}-ent"
  #     kubernetes: "{{ org.k8s }}"
  #     vault: "{{ org.vault }}"
  #     gitops: "{{ org.gitops }}"
  #     policy_type: "r3-corda-ent"
  #   loop: "{{ network['organizations'] }}"
  #   loop_control:
  #     loop_var: org
  #   when: org.type == 'notary'

  # These variables can be overriden from the command line
  vars:
    privilege_escalate: false     # Default to NOT escalate to root privledges
    install_os: "linux"           # Default to linux OS
    install_arch:  "amd64"        # Default to amd64 architecture
    bin_install_dir:  "~/bin"     # Default to /bin install directory for binaries
