---
# This is a sample configuration file for setting up initial Fabric network with 1 KAFKA Orderer and 5 Nodes.
network:
  # Network level configuration specifies the attributes required for each organization
  # to join an existing network.
  type: fabric
  version: "NETWORK_VERSION"                 # currently tested 1.4.8 and 2.2.0
  frontend: enabled #Flag for frontend to enabled for nodes/peers

  #Environment section for Kubernetes setup
  env:
    type: "FLUX_SUFFIX"              # tag for the environment. Important to run multiple flux on single cluster
    proxy: haproxy                  # values can be 'haproxy' or 'ambassador'
    ambassadorPorts: 15010,15090    # is valid only if proxy='ambassador'
    retry_count: 20                # Retry count for the checks
    external_dns: enabled         # Should be enabled if using external-dns for automatic route configuration

  # Docker registry details where images are stored. This will be used to create k8s secrets
  # Please ensure all required images are built and stored in this registry.
  # Do not check-in docker_password.
  docker:
    url: "DOCKER_URL"
    username: "DOCKER_USERNAME"
    password: "DOCKER_PASSWORD"
  
  # Remote connection information for orderer (will be blank or removed for orderer hosting organization)
  consensus:
    name: raft
    type: broker
    replicas: 4
    grpc:
      port: 9092
  orderers:
    - orderer:
      type: orderer
      name: orderer1
      org_name: sfab #org_name should match one organization definition below in organizations: key            
      uri: orderer1.EXTERNAL_URL_SUFFIX:8443 # orderer1.hf.demo.aws.blockchaincloudpoc.com:8443   # Can be external or internal URI for orderer which should be reachable by all peers
      certificate: USER_DIRECTORY/build/orderer1/ca.crt           # Ensure that the directory exists
    - orderer:
      type: orderer
      name: orderer2
      org_name: sfab #org_name should match one organization definition below in organizations: key            
      uri: orderer2.EXTERNAL_URL_SUFFIX:8443 # orderer2.hf.demo.aws.blockchaincloudpoc.com:8443   # Can be external or internal URI for orderer which should be reachable by all peers
      certificate: USER_DIRECTORY/build/orderer2/ca.crt # Ensure that the directory exists
    - orderer:
      type: orderer
      name: orderer3
      org_name: sfab
      uri: orderer3.EXTERNAL_URL_SUFFIX:8443 #  orderer3.hf.demo.aws.blockchaincloudpoc.com:8443
      certificate: USER_DIRECTORY/build/orderer3/ca.crt 
  # The channels defined for a network with participating peers in each channel
  channels:
  - channel:
    consortium: SupplyChainConsortium
    channel_name: AllChannel
    chaincodes:
      - supplychain
    orderers:
      - sfab
    participants:
    - organization:
      name: cfab
      type: creator
      org_status: new
      peers:
      - peer:
        name: peer0
        gossipAddress: peer0.cfab-net.EXTERNAL_URL_SUFFIX:8443 # peer0.cfab-net.hf.demo.aws.blockchaincloudpoc.com:8443
        peerAddress: peer0.cfab-net.EXTERNAL_URL_SUFFIX:8443 # peer0.cfab-net.hf.demo.aws.blockchaincloudpoc.com:8443
      ordererAddress: orderer1.EXTERNAL_URL_SUFFIX:8443 # orderer1.hf.demo.aws.blockchaincloudpoc.com:8443 # code
    # - organization:
    #   name: mmar
    #   type: joiner
    #   org_status: new
    #   peers:
    #   - peer:
    #     name: peer0
    #     gossipAddress: peer0.mmar-net.hf.demo.aws.blockchaincloudpoc.com:8443
    #     peerAddress: peer0.mmar-net.hf.demo.aws.blockchaincloudpoc.com:8443
    #   ordererAddress: orderer1.hf.demo.aws.blockchaincloudpoc.com:8443
    endorsers:
    - organization:
      name: cfab
      peers:
      - peer:
        name: peer0
        corepeerAddress: peer0.cfab-net.EXTERNAL_URL_SUFFIX:8443 # peer0.cfab-net.hf.demo.aws.blockchaincloudpoc.com:8443
        certificate: USER_DIRECTORY/build/FABRIC/certificates/cfab/peer0/ca.crt # certificate path for peer
    # - organization:
    #   name: mmar
    #   peers:
    #   - peer:
    #     name: peer0
    #     corepeerAddress: peer0.mmar-net.hf.demo.aws.blockchaincloudpoc.com:8443
    #     certificate: /home/marina/build/FABRIC/certificates/mmar/peer0/ca.crt # certificate path for peer
    genesis:
      name: OrdererGenesis
 
  # Allows specification of one or many organizations that will be connecting to a network.
  # If an organization is also hosting the root of the network (e.g. doorman, membership service, etc),
  # then these services should be listed in this section as well.
  organizations:

    # Specification for the 1st organization. Each organization maps to a VPC and a separate k8s cluster
    - organization:
      name: sfab
      country: UK
      state: London
      location: London
      subject: "O=Orderer,L=51.50/-0.13/London,C=GB"
      type: orderer
      external_url_suffix: "EXTERNAL_URL_SUFFIX" # hf.demo.aws.blockchaincloudpoc.com
      org_status: new
      fabric_console: enabled
      ca_data:
        url: ca.sfab-net:7054
        certificate: file/server.crt        # This has not been implemented in 0.2.0.0
  
      cloud_provider: aws   # Options: aws, azure, gcp, digitalocean, minikube
      aws:
        access_key: "AWS_ACCESS_KEY" # AWS Access key, only used when cloud_provider=aws
        secret_key: "AWS_SECRET_KEY" # AWS Secret key, only used when cloud_provider=aws

      # Kubernetes cluster deployment variables. The config file path and name has to be provided in case
      # the cluster has already been created.
      k8s:
        region: "AWS_REGION_NAME"
        context: "CLUSTER_CONTEXT" 
        config_file: "CLUSTER_CONFIG" 

      vault:
        url: "VAULT_ADDR"
        root_token: "VAULT_ROOT_TOKEN"
        secret_path: "secretsv2"

      # Git Repo details which will be used by GitOps/Flux.
      # Do not check-in git_access_token
      gitops:
        git_protocol: "https"
        git_url: "https://github.com/GIT_USERNAME/bevel-3.git"
        release_dir: "platforms/hyperledger-fabric/releases/dev" # Relative Path in the Git repo for flux sync per environment.
        chart_source: "platforms/hyperledger-fabric/charts"     # Relative Path where the Helm charts are stored in Git repo
        git_repo: "github.com/GIT_USERNAME/bevel-3.git" # "github.com/mgCepeda/blockchain-automation-framework.git" # Gitops https URL for git push like "innersource.accenture.com/scm/blockofz/fulcrum.git"
        username: "GIT_USERNAME"          # Git Service user who has rights to check-in in all branches
        password: "GIT_TOKEN"
        private_key: "PRIVATE_KEY_PATH"
        email: "GIT_EMAIL_ADDR"          # Path to private key file which has write-access to the git repo (Optional for https; Required for ssh)
        branch: "GIT_BRANCH"

      #Optional for infrastructure configuration files.
      infrastructure:
        target_state: "present"  # Options: present, absent, planned
        refresh_inventory: yes

      # Services maps to the pods that will be deployed on the k8s cluster
      # This sample is an orderer service and includes a zk-kafka consensus
      services:
        ca:
          name: ca
          subject: "/C=GB/ST=London/L=London/O=Orderer/CN=ca.sfab-net"
          type: ca
          grpc:
            port: 7054
        
        consensus:
          name: raft
          type: broker
          replicas: 4
          grpc:
            port: 9092
                
        orderers:
        - orderer:
          name: orderer1
          type: orderer
          consensus: raft
          grpc:
            port: 7050
          ordererAddress: orderer1.EXTERNAL_URL_SUFFIX:8443 # add
        - orderer:
          name: orderer2
          type: orderer
          consensus: raft
          grpc:
            port: 7050
          ordererAddress: orderer2.EXTERNAL_URL_SUFFIX:8443 # add
        - orderer:
          name: orderer3
          type: orderer
          consensus: raft
          grpc:
            port: 7050
          ordererAddress: orderer3.EXTERNAL_URL_SUFFIX:8443 # add
          
        
    # Specification for the 2nd organization. Each organization maps to a VPC and a separate k8s cluster
    - organization:
      name: cfab
      country: GB
      state: London
      location: London
      subject: "O=Carrier,OU=Carrier,L=51.50/-0.13/London,C=GB"
      type: peer
      fabric_console: enabled
      external_url_suffix: "EXTERNAL_URL_SUFFIX" # hf.demo.aws.blockchaincloudpoc.com
      org_status: new
      orderer_org: sfab
      ca_data:
        url: ca.cfab-net:7054
        certificate: file/server.crt
      
      cloud_provider: aws   # Options: aws, azure, gcp, digitalocean, minikube
      aws:
        access_key: "AWS_ACCESS_KEY" # AWS Access key, only used when cloud_provider=aws
        secret_key: "AWS_SECRET_KEY" # AWS Secret key, only used when cloud_provider=aws

      # Kubernetes cluster deployment variables. The config file path and name has to be provided in case
      # the cluster has already been created.
      k8s:
        region: "AWS_REGION_NAME"
        context: "CLUSTER_CONTEXT" # "arn:aws:eks:eu-west-1:895052373684:cluster/demo-CLUSTER"
        config_file: "CLUSTER_CONFIG" # "/home/saurabh/.kube/demo-cluster"
      # Hashicorp Vault server address and root-token. Vault should be unsealed.
      # Do not check-in root_token
      # vault:
      #   url: "http://vault.internal.dev.aws.blockchaincloudpoc-develop.com:20002" # "http://vault.internal.demo.aws.blockchaincloudpoc.com:9001"
      #   root_token: "s.8rzRdEGISjdOPL0oqZogI4Fb" # "s.Z6gcVC1l62VGnBkKFQCwpjqw"
      #   secret_path: "secretsv2"
      vault:
        url: "VAULT_ADDR"
        root_token: "VAULT_ROOT_TOKEN"
        secret_path: "secretsv2"

      # Git Repo details which will be used by GitOps/Flux.
      # Do not check-in git_access_token
      gitops:
        git_protocol: "https"
        git_url: "https://github.com/GIT_USERNAME/bevel-3.git"
        release_dir: "platforms/hyperledger-fabric/releases/dev" # Relative Path in the Git repo for flux sync per environment.
        chart_source: "platforms/hyperledger-fabric/charts"     # Relative Path where the Helm charts are stored in Git repo
        git_repo: "github.com/GIT_USERNAME/bevel-3.git" # "github.com/mgCepeda/blockchain-automation-framework.git" # Gitops https URL for git push like "innersource.accenture.com/scm/blockofz/fulcrum.git"
        username: "GIT_USERNAME"          # Git Service user who has rights to check-in in all branches
        password: "GIT_TOKEN"
        private_key: "PRIVATE_KEY_PATH"
        email: "GIT_EMAIL_ADDR"          # Path to private key file which has write-access to the git repo (Optional for https; Required for ssh)
        branch: "GIT_BRANCH"

      #Optional for infrastructure configuration files.
      infrastructure:
        target_state: "present"  # Options: present, absent, planned
        refresh_inventory: yes
      
      # Generating User Certificates with custom attributes using Fabric CA in BAF for Peer Organizations
      users:
        - user:
          identity: user1
          attributes:
            - key: key1
              value: value1
            - key: key2
              value: value2
        - user:
          identity: user2
          attributes:
            - key: key1
              value: value1
            - key: key3
              value: value3

      services:
        ca:
          name: ca
          subject: "/C=GB/ST=London/L=London/O=Carrier/CN=ca.cfab-net"
          type: ca
          grpc:
            port: 7054
        peers:
        - peer:
          name: peer0          
          type: anchor    # This can be anchor/nonanchor. Atleast one peer should be anchor peer.    
          gossippeeraddress: peer0.cfab-net.EXTERNAL_URL_SUFFIX:8443 # Internal Address of the other peer in same Org for gossip, same peer if there is only one peer
          peerAddress: peer0.cfab-net.EXTERNAL_URL_SUFFIX:8443 # External URI of the peer
          certificate: USER_DIRECTORY/build/FABRIC/certificates/cfab/peer0/ca.crt # ?
          cli: enabled      # Creates a peer cli pod depending upon the (enabled/disabled) tag.
          cactus_connector: enabled  # set to enabled to create a cactus connector for Fabric          
          grpc:
            port: 7051         
          events:
            port: 7053
          couchdb:
            port: 5984
          restserver:
            targetPort: 20001
            port: 20001 
          expressapi:
            targetPort: 3000
            port: 3000
          chaincodes:
            - name: "supplychain"   #This has to be replaced with the name of the chaincode
              version: "1"   #This has to be replaced with the version of the chaincode
              maindirectory: "cmd"    #The main directory where chaincode is needed to be placed
              repository:
                username: "GIT_USERNAME"          # Git Service user who has rights to check-in in all branches
                password: "GIT_TOKEN"
                url: "github.com/GIT_USERNAME/bevel-samples" # "github.com/mgCepeda/bevel-samples.git"
                branch: develop
                path: "examples/supplychain-app/fabric/chaincode_rest_server/chaincode/"    #The path to the chaincode 
              arguments: '\"init\",\"\"'       #Arguments to be passed along with the chaincode parameters
              endorsements: ""