##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
global:
  serviceAccountName: vault-auth
  cluster:
    provider: aws  # choose from: minikube | aws | azure | gcp
    cloudNativeServices: false # set to true to use Cloud Native Services (SecretsManager and IAM for AWS; KeyVault & Managed Identities for Azure)
  vault:
    type: hashicorp
    role: vault-role
    address: 
    authPath: supplychain
    secretEngine: secretsv2
    secretPrefix: "data/supplychain"
  proxy:
    #This will be the proxy/ingress provider. Can have values "ambassador" or "none"
    #Eg. provider: "ambassador"
    provider: "ambassador"
    #This field contains the external URL of the node
    #Eg. externalUrlSuffix: test.blockchaincloudpoc.com
    externalUrlSuffix: test.blockchaincloudpoc.com
    p2p: 15010

storage:
  #Provide the storage for node
  #Eg. size: 1Gi
  size: 1Gi
  dbSize: 2Gi
  allowedTopologies:
    enabled: false
tls:
  enabled: true

image:
  #Provide the image pull secret of image
  #Eg. pullSecret: regcred
  pullSecret: 
  pullPolicy: IfNotPresent
  h2: ghcr.io/hyperledger/h2:2018
  #Provide the containerName of image
  #Eg. corda: ghcr.io/hyperledger/bevel-corda:4.9
  corda:
    repository: ghcr.io/hyperledger/bevel-corda
    tag: 4.9
  #Provide the name of image for init container
  #Eg. initContainer: ghcr.io/hyperledger/bevel-alpine:latest
  initContainer: ghcr.io/hyperledger/bevel-alpine:latest
  hooks:
    repository: ghcr.io/hyperledger/bevel-build
    tag: jdk8-stable
  
#For more information for node.Conf fields please refer to: https://docs.r3.com/en/platform/corda/4.9/community/corda-configuration-fields.html
nodeConf:
  defaultKeystorePassword: cordacadevpass
  defaultTruststorePassword: trustpass
  keystorePassword: newpass
  truststorePassword: newtrustpass
  sslkeyStorePassword: sslpass
  ssltrustStorePassword: ssltrustpass
  removeKeysOnDelete: true
  #Provide the rpcUser for corda node
  rpcUser:
    - name: nodeoperations
      password: nodeoperationsAdmin
      permissions: [ALL] 
  #The host and port on which the node is available for protocol operations over ArtemisMQ.
  p2pPort: 10002
  rpcPort: 10003
  rpcadminPort: 10005
  rpcSettings:
    useSsl: false
    standAloneBroker: false
    address: "0.0.0.0:10003"
    adminAddress: "0.0.0.0:10005"
    ssl:
      certificatesDirectory: na-ssl-false
      sslKeystorePath: na-ssl-false
      trustStoreFilePath: na-ssl-false
  #Provide the legalName for node
  #Eg. legalName: "O=Notary,OU=Notary,L=London,C=GB"
  legalName: "O=Notary,OU=Notary,L=London,C=GB"
  messagingServerAddress:
  jvmArgs:
  systemProperties:
  sshd:
    port:
  exportJMXTo:
  transactionCacheSizeMegaBytes: 8
  attachmentContentCacheSizeMegaBytes: 10
  notary:
    enabled: true
    validating: true
    serviceLegalName: "O=Notary Service,OU=Notary,L=London,C=GB"
  detectPublicIp: false
  database:
    exportHibernateJMXStatistics: false
  #Provide the database port
  #Eg. dbPort: 9101
  dbPort: 9101
  dataSourceUser: sa
  dataSourcePassword: admin
  dataSourceClassName: "org.h2.jdbcx.JdbcDataSource"
  jarPath: "/data/corda-workspace/h2/bin"
  #Provide the nms for node
  #Eg. networkMapURL: "https://supplychain-nms.supplychain-ns"
  networkMapURL: https://supplychain-nms.supplychain-ns
  doormanURL: https://supplychain-doorman.supplychain-ns
  #Provide the devMode for corda node
  #Eg. devMode: true
  devMode: false
  #Provide the JAVA_OPTIONS for Corda Node as string
  javaOptions: "-Xmx512m"

cordApps: 
  #Provide if you want to provide jars in cordApps
  #Eg. getCordApps: true or false
  getCordApps: false
  mavenSecret:
  jars:
    #Provide url to download the jar using wget cmd
    #Eg. url: https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases/net/corda/corda-finance/3.3-corda/corda-finance-3.3-corda.jar 
    - url: 
    - url:

resources:
  db:
    #Provide the limit memory for node
    #Eg. memLimit: "1Gi"
    memLimit: "1G"
    #Provide the requests memory for node
    #Eg. memRequest: "1Gi"
    memRequest: "512M"
  node:
    #Provide the limit memory for node
    #Eg. memLimit: "1Gi"
    memLimit: "2G"
    #Provide the requests memory for node
    #Eg. memRequest: "1Gi"
    memRequest: "1G"
